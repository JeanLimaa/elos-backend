generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// definições de enums para os tipos de dados
enum UserRole {
  USER
  ADMIN
}

enum ComplaintType {
  VIOLENCE
  DISCRIMINATION
  THREAT
  OTHER
}

enum ComplaintStatus {
  RECEIVED      
  IN_REVIEW     
  FORWARDED     
  COMPLETED
}

enum RequestType {
  JURIDICO
  PSICOLOGICO
}

// ->-> TABELAS DO BANCO DE DADOS <- //
model User {
  id             Int    @id @default(autoincrement())
  email          String    @unique
  password       String
  name           String
  role           UserRole  @default(USER)
  createdAt      DateTime  @default(now()) @map("created_at")

  complaints     Complaint[]

  supportRequests SupportRequest[]  @relation("SupportOwner")
  supportRequestsHandled    SupportRequest[] @relation("SupportHandled")

  @@map("users")
}

// denúncias feitas por usuários
model Complaint {
  id             Int          @id @default(autoincrement())
  type           ComplaintType
  title          String
  description    String
  location       String?         
  eventDate      DateTime?       @map("event_date")
  attachmentUrl  String?         @map("attachment_url")
  status         ComplaintStatus @default(RECEIVED)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  
  adminResponse       String?        @map("admin_response") // mensagem que o admin DEVE enviar para o usuário ao responder

  user           User            @relation(fields: [userId], references: [id])
  userId         Int   @map("user_id")

  @@map("complaints")
}

// solicitações de suporte: jurídico ou psicológico
model SupportRequest {
  id            Int      @id @default(autoincrement())
  type          RequestType
  title         String
  description   String     
  createdAt     DateTime    @default(now()) @map("created_at")
  status        ComplaintStatus @default(RECEIVED)

  // Relacionamento com o usuário que fez o pedido
  user        User     @relation("SupportOwner", fields: [userId], references: [id])
  userId      Int       @map("user_id")

  // Relacionamento com o admin que atendeu (opcional)
  handledBy       User?    @relation("SupportHandled", fields: [handledById], references: [id])
  handledById     Int?     @map("handled_by_id")

  @@map("support_requests")
}